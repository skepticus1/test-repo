first line
second line, git commit --amend

git status                      : shows status of the repo
git add myfile.txt              : stages the file
git commit myfile.txt           : commits file
git commit --amend myfile.txt   : commits file, but doesn't make a new commit.
git log                         : shows the repo's commit log
    (when the log is long, press q, to exit it)
git restore --staged myfile.txt : removes file from staged
git restore myfile.txt          : overwrites the working file with the staged file.
                                : undos the changes if no staged file
    (there are two files: one you can edit, the working file. two the staged file.)
git add .                       : stages all unstaged changes
git commit -m "myCommitMsg"     : commits, -m for message
git rm filename.file            : removes the files from the working directory
git add -u                      : like git add . , but doesn't stage new files
git commit -a                   : like git add -u , doesn't stage new files
git revert "commitIDhash        : undos the commit and leaves a recorded in the git log
git reset HEAD~                 : undos the commit no log. can undo the undo from revert.
    (git restore Item.h will need to be entered to bring it back)
git reset HEAD~2                : undos the last two commits
git branch                      : shows current working branch. * annotates current branch
git branch myfeature            : creates branch myfeature
git checkout myfeature          : switches to myfeature branch
    (changes made while on myfeature branch won't show on main branch, and viceversa)
git checkout -b health.h        : creates and switches to health.h branch
git merge health.h              : merge of health.h into master
    (fast-forward merge just moves the master point to the health.h branch,
     because there we're no changes in the master branch at the time of the merge
     recursive merge and ort merge exist too. three way merge. merge of tip of two branches
     and the commit the merge was from.)
git branch -d health.h          : deletes the health.h branch
git clear                       : clears the cli
git branch -D myfeature         : force deletes a branch, even if it has changes that aren't merged into master
git log --pretty=oneline        : shows the commits one per line. easy to read.
git rebase master               : changes the base of the current branch, to the latest master commit.
    (this is done to have a linear/clean commit log. section 18, rebasing explains this well.
     1. branch off master with new branch "feature".
        a. feature has n commits)
     2. master has n commits after "feature" branch was created.
     3. run rebase master within feature branch.
     4. goto master branch then merge feature branch, for a fastforward merge.
     5. commits will be logged all master commits followed by feature commits.
#
# merge conflicts
#
git diff hashID hashID          : compares two commits
    $ git diff ff8f8b3e3cc3eef53dffd250e5d7baccec8c4c28 06e818a78c48aa5d0e1d7ea85cd40a2e2edf40b6
    diff --git a/f1.txt b/f1.txt
    index a774443..6692562 100644
    --- a/f1.txt
    +++ b/f1.txt
    @@ -1 +1 @@   (number of lines removed, number of lines added)
    -void func(); (removed line)
    +bool func(); (added line)

    $ git merge feature
    Auto-merging f1.txt
    CONFLICT (content): Merge conflict in f1.txt
    Automatic merge failed; fix conflicts and then commit the result.

        <<<<<<< HEAD
        bool func();
        =======
        int func();
        >>>>>>> feature     
        (correct the code, either remove bad/old code, or write new code and save)
        (stage and commit the change)

git remote
git remote add origin https://github.com/skepticus1/test-repo.git
    (adds origin (origin is just a name, can be anything. with the url of the repo directory i made
        at github.com))
git branch -M main              : renames branch, so you can rename it from master to main
git push -u origin main         : pushes the repo to the "origin" (which is just a name) the remote repo.
    -u is upstream
            $ git push -u origin main
            Enumerating objects: 91, done.
            Counting objects: 100% (91/91), done.
            Delta compression using up to 16 threads
            Compressing objects: 100% (80/80), done.
            Writing objects: 100% (91/91), 8.78 KiB | 599.00 KiB/s, done.
            Total 91 (delta 43), reused 0 (delta 0), pack-reused 0
            remote: Resolving deltas: 100% (43/43), done.
            To https://github.com/skepticus1/test-repo.git
             * [new branch]      main -> main
            branch 'main' set up to track 'origin/main'.
git branch -vv                  : shows the branches and their remotes

git clone https://github.com/skepticus1/test-repo.git
git clone git@github.com:skepticus1/test-repo.git
    (clones the repo to folder it's ran from, must have keys setup with your account. ssh key and personal access
    token, respectively)

git push origin main (origin is the remote name it was cloned from)
    (may ask for PAT, toke made from the github site. paste it in. i didn't need to enter my.)
git config --global credential.helper cache
    (caches the PAT, seems this was already done. Not sure how to verify.)

git fetch (checks for updates with remote repo) updates remote tracking branch

git push -u origin feature (pushes the branch "feature" to the remote "origin")
                            (can do if "feature" branch isn't yet being tracked in origin)
    $ git branch -vv
    *   feature 39bb69d updated myfile.txt with nots on cloing, push, pull, fetch
        main    39bb69d [origin/main] updated myfile.txt with nots on cloing, push, pull, fetch
    (you can see main is being tracked [origin/main], but feature is not.)
    $ git push -u origin feature
    $ git branch -vv
    *   feature 39bb69d [origin/feature] updated myfile.txt with nots on cloing, push, pull, fetch
        main    39bb69d [origin/main] updated myfile.txt with nots on cloing, push, pull, fetch
    (now it is.)

git push --delete origin feature ( will delete the feature branch from origin)
    $ git branch -vv
    * feature 39bb69d [origin/feature: gone] updated myfile.txt with nots on cloing, push, pull, fetch
    main    39bb69d [origin/main] updated myfile.txt with nots on cloing, push, pull, fetch

git push -f origin main (nuclear option. can make others and/or you lose work)